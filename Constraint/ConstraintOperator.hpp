/**
 * @file ConstraintOperator.hpp
 * @author Wen Yan (wenyan4work@gmail.com)
 * @brief
 * @version 0.1
 * @date 2019-10-17
 *
 * @copyright Copyright (c) 2019
 *
 */
#ifndef CONSTRAINTOPERATOR_HPP_
#define CONSTRAINTOPERATOR_HPP_

#include "ConstraintVector.hpp"
#include "Trilinos/TpetraUtil.hpp"

#include <array>
#include <deque>
#include <vector>

#include <Tpetra_RowMatrixTransposer_decl.hpp>

using IteHistory = std::deque<std::array<double, 6>>; ///< recording iteration history

class ConstraintOperator {
  public:
    ConstraintOperator(Teuchos::RCP<TOP> &mobOp, Teuchos::RCP<TCMAT> &uniDcMat, Teuchos::RCP<TCMAT> &biDbMat,
                       std::vector<double> &invKappaDiagMat);

    void apply(const ConstraintVector &cVecIn, ConstraintVector &cVecOut);

    // constant operators
    Teuchos::RCP<TOP> mobOpRcp;          ///< mobility matrix
    Teuchos::RCP<TCMAT> uniDcMatRcp;     ///< unilateral constraint geometry matrix D_c
    Teuchos::RCP<TCMAT> biDbMatRcp;      ///< bilateral constraint geometry matrix D_b
    std::vector<double> invKappaDiagMat; ///< 1/h K^{-1} diagonal matrix, in std::vector format

    // working multivectors with 4 columns
    Teuchos::RCP<TMV> cFTVecRcp; ///< force & torque vectors generated by constraint forces
    Teuchos::RCP<TMV> cUOVecRcp; ///< U & Omega vectors generated by constraint forces
};

#endif